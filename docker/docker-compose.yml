version: '3.8'

services:
  postgres_age:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: fiore_postgres_age
    environment:
      POSTGRES_USER: ${DB_USER:-fioreuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fiorepassword}
      POSTGRES_DB: ${DB_NAME:-fiore}
    volumes:
      - postgres_age_data:/var/lib/postgresql/data
      - ../backend/sql/00_init_age_graph.sql:/docker-entrypoint-initdb.d/00_init_age_graph.sql
      #- ../backend/sql/00_install_postgis.sql:/docker-entrypoint-initdb.d/00_install_postgis.sql
      - ../backend/sql/schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ../backend/sql/02_create_hoppscotch_db.sql:/docker-entrypoint-initdb.d/02_create_hoppscotch_db.sql
      #- ../backend/sql/password_hashing.sql:/docker-entrypoint-initdb.d/02_initial_passwords.sql
    ports:
      - "${DB_PORT_HOST:-5454}:${DB_PORT_CONTAINER:-5432}"
    networks:
      - fiore_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-fioreuser} -d $${POSTGRES_DB:-fiore}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: fiore_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-fioreminiouser}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-fioreminiopassword}
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - fiore_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: fiore_backend
    environment:
      DB_USER: ${DB_USER:-fioreuser}
      DB_PASSWORD: ${DB_PASSWORD:-fiorepassword}
      DB_NAME: ${DB_NAME:-fiore}
      DB_HOST: postgres_age
      DB_PORT: ${DB_PORT_CONTAINER:-5432}
      JWT_SECRET: ${JWT_SECRET:-your_very_secret_key_for_jwt_fiore}
      MINIO_ENDPOINT: minio:${MINIO_INTERNAL_API_PORT:-9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-fioreminiouser}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-fioreminiopassword}
      MINIO_BUCKET: ${MINIO_BUCKET:-fiore}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      API_KEY: ${API_KEY:-your_strong_backend_api_key_fiore}
      PORT: "1163"
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SSO_PROVIDERS: ${SSO_PROVIDERS:-}
    ports:
      - "1163:1163"
    depends_on:
      postgres_age:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../backend/utils:/opt/app/utils
      - ../backend/tests:/opt/app/tests
      - ../backend/sql:/opt/app/sql
    networks:
      - fiore_network
    restart: unless-stopped

  age_viewer:
    image: gudari/age-viewer
    container_name: fiore_age_viewr
    ports:
      - "3001:3001"
    environment:
      GRAPH_DB_HOST: postgres_age
      GRAPH_DB_PORT: ${DB_PORT_CONTAINER:-5432}
      GRAPH_DB_USER: ${DB_USER:-fioreuser}
      GRAPH_DB_PASSWORD: ${DB_PASSWORD:-fiorepassword}
      GRAPH_DB_NAME: ${DB_NAME:-fiore}
      DEFAULT_GRAPH_NAME: fiore
    depends_on:
      postgres_age:
        condition: service_healthy
    networks:
      - fiore_network
    restart: unless-stopped

  postgres_hoppscotch: # New service for Hoppscotch's dedicated DB
    image: postgres:16 # Or your preferred plain PostgreSQL version
    container_name: fiore_postgres_hoppscotch
    environment:
      POSTGRES_USER: ${DB_USER_HOPPSCOTCH:-hoppscotchuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD_HOPPSCOTCH:-hoppscotchpass}
      POSTGRES_DB: ${DB_NAME_HOPPSCOTCH:-hoppscotch}
    volumes:
      - postgres_hoppscotch_data:/var/lib/postgresql/data
    ports:
      - "5435:5432" # Expose on a different host port, e.g., 5435
    networks:
      - fiore_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-hoppscotchuser} -d $${POSTGRES_DB:-hoppscotch}"]
      interval: 10s
      timeout: 5s
      retries: 5

  hoppscotch:
      image: hoppscotch/hoppscotch
      container_name: fiore_hoppscotch
      env_file:
        - ./.env # Assuming docker/.env
      environment:
        JWT_SECRET: ${JWT_SECRET}
        DATABASE_URL: "postgresql://${DB_USER_HOPPSCOTCH:-hoppscotchuser}:${DB_PASSWORD_HOPPSCOTCH:-hoppscotchpass}@postgres_hoppscotch:5432/${DB_NAME_HOPPSCOTCH:-hoppscotch}?schema=public" # <--- POINTS TO NEW DB
        SESSION_SECRET: ${SESSION_SECRET}
        # VITE_ALLOWED_AUTH_PROVIDERS and SSO_PROVIDERS from your hoppscotch .env file
      ports:
        - "3002:3000"
        - "3170:3170"
        - "3100:3100"
      command: >
        sh -c "echo '>>> Waiting for Hoppscotch DB...' && sleep 5 && echo '>>> Running Prisma Migrations for Hoppscotch...' && pnpx prisma migrate deploy && echo '>>> Starting Hoppscotch App...' && node /usr/src/app/aio_run.mjs"
      volumes:
        - ./hoppscotch/workspace.json:/app/pwa/public/environment.json:ro
      networks:
        - fiore_network
      restart: unless-stopped
      depends_on:
        postgres_hoppscotch: # Depends on the new DB service
          condition: service_healthy
volumes:
  postgres_age_data: # For your main app
    driver: local
  postgres_hoppscotch_data: # For Hoppscotch
    driver: local
  minio_data:
    driver: local

networks:
  fiore_network:
    driver: bridge
